AWSTemplateFormatVersion: "2010-09-09"

Description: "Step functions to start and stop AWS services."

Metadata:
  Author: FilipKamenar

Parameters:
  NamePrefix:
    Type: String
  Environment:
    Type: String
  LambdaManageServicesArn:
    Type: String
  LambdaCheckRdsArn:
    Type: String

Resources: 
  StartStopServicesStateMachineRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: !Sub ${NamePrefix}-${Environment}-start-stop-state-machine-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Principal:
              Service:
              - "states.amazonaws.com"
            Action:
            - "sts:AssumeRole"
        Path: "/"
        Policies:
        - PolicyName: "StatesExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action:
              - "lambda:InvokeFunction"
              - "lambda:InvokeAsync"
              Resource:
              - !Ref LambdaManageServicesArn
              - !Ref LambdaCheckRdsArn

  StartServicesStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub ${NamePrefix}-${Environment}-start-services-state-machine
      DefinitionString:
        !Sub |
          {
            "StartAt": "StartRDSDatabases",
            "States": {
              "StartRDSDatabases": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaManageServicesArn}",
                  "Payload": {
                    "action": "start",
                    "resource": "rds"
                  }
                },
                "Next": "WaitForRDSDatabase"
              },
              "WaitForRDSDatabase": {
                "Type": "Wait",
                "Seconds": 30,
                "Next": "CheckRDSDatabaseStatus"
              },
              "CheckRDSDatabaseStatus": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaCheckRdsArn}"
                },
                "OutputPath":"$.Payload",
                "Next": "ValidateStatusRDS"
              },
              "ValidateStatusRDS": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$",
                    "StringEquals": "available",
                    "Next": "StartECSTask"
                  }
                ],
                "Default": "WaitForRDSDatabase"
              },
              "StartECSTask": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaManageServicesArn}",
                  "Payload": {
                    "action": "start",
                    "resource": "ecs"
                  }
                },
                "End": true
              }
            }
          }
      RoleArn: !GetAtt StartStopServicesStateMachineRole.Arn

  StopServicesStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub ${NamePrefix}-${Environment}-stop-services-state-machine
      DefinitionString:
        !Sub |
          {
            "StartAt": "StopEcsRdsEc2",
            "States": {
              "StopEcsRdsEc2": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaManageServicesArn}",
                  "Payload": {
                    "action": "stop"
                  }
                },
                "End": true
              }
            }
          }
      RoleArn: !GetAtt StartStopServicesStateMachineRole.Arn

  IAMRoleScheduler:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: !Sub ${NamePrefix}-${Environment}-stop-state-machine-scheduler-role
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Action:
                - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                  - scheduler.amazonaws.com
        Policies:
          - PolicyName: "scheduler-permissions-step-functions"
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - "states:StartExecution"
                  Resource:
                    - !GetAtt StopServicesStateMachine.Arn
                    - !GetAtt StartServicesStateMachine.Arn
  
  EventBridgeSchedulerStart:
      Type: "AWS::Scheduler::Schedule"
      Properties:
        Name: !Sub ${NamePrefix}-${Environment}-start-state-machine-schedule
        Description: "Start services schedule"
        ScheduleExpression: "cron(0 8 ? * MON,TUE,WED,THU,FRI *)"
        ScheduleExpressionTimezone: "Europe/Prague"
        State: "ENABLED"
        FlexibleTimeWindow:
          Mode: "OFF"
        Target:
          Arn: !GetAtt StartServicesStateMachine.Arn
          RoleArn: !GetAtt IAMRoleScheduler.Arn
  
  EventBridgeSchedulerStop:
      Type: "AWS::Scheduler::Schedule"
      Properties:
        Name: !Sub ${NamePrefix}-${Environment}-stop-state-machine-schedule
        Description: "Stop services schedule"
        ScheduleExpression: "cron(0 20 ? * MON,TUE,WED,THU,FRI *)"
        ScheduleExpressionTimezone: "Europe/Prague"
        State: "ENABLED"
        FlexibleTimeWindow:
          Mode: "OFF"
        Target:
          Arn: !GetAtt StopServicesStateMachine.Arn
          RoleArn: !GetAtt IAMRoleScheduler.Arn

    